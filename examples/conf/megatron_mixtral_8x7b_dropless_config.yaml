name: megatron_mixtral_dropless
model_source: megatron
seed: 1234

trainer:
  devices: 32
  num_nodes: 16
  max_epochs: -1 # PTL default. In practice, max_steps will be reached first.
  max_steps: 22500 # consumed_samples = global_step * micro_batch_size * data_parallel_size * accumulate_grad_batches
  log_every_n_steps: 1
  val_check_interval: 22500
  check_val_every_n_epoch: null
  num_sanity_val_steps: 0
  limit_val_batches: 1
  limit_test_batches: 1
  gradient_clip_val: 1.0

exp_manager:
  log_local_rank_0_only: True # reduce file system access pressure
  create_tensorboard_logger: True
  explicit_log_dir: null
  exp_dir: null
  name: megatron_mixtral_dropless
  resume_if_exists: True
  resume_ignore_no_checkpoint: True
  create_checkpoint_callback: True
  checkpoint_callback_params:
    monitor: step
    save_top_k: 1
    mode: max
    save_last: False
    filename: 'megatron_mixtral--{step}-{consumed_samples}'
    model_parallel_size: ${multiply:${distributed_strategy.tensor_model_parallel_size}, ${distributed_strategy.pipeline_model_parallel_size}}
    every_n_train_steps: 200000
  log_parameter_norm: True # Logs parameter norm across model parallel ranks
  log_gradient_norm: True # Logs gradient norm across model parallel ranks
  enable_recovery_time_instrumentation: False # default to not printing the detailing timing for recovery
  async_checkpointing: False # default to not use async checkpointing
  save_xser: True
  load_xser: True
  resume_from_checkpoint: null # manually set the checkpoint file to load from


distributed_strategy:
  tensor_model_parallel_size: 32
  pipeline_model_parallel_size: 4
  virtual_pipeline_model_parallel_size: 1
  zero1: True
  sequence_parallel: True
  expert_model_parallel_size: 1
  token_shuffle_group_size: 1

data:
  micro_batch_size: 1 # limited by TRN memory
  global_batch_size: 128
  # Path to data must be specified by the user.
  # Supports List, String and Dictionary
  # List : can override from the CLI: "model.data.data_prefix=[.5,/raid/data/pile/my-gpt3_00_text_document,.5,/raid/data/pile/my-gpt3_01_text_document]",
  # Or see example below:
  # data_prefix:
  #   - .5
  #   - /raid/data/pile/my-gpt3_00_text_document
  #   - .5
  #   - /raid/data/pile/my-gpt3_01_text_document
  # Dictionary: can override from CLI "model.data.data_prefix"={"train":[1.0, /path/to/data], "validation":/path/to/data, "test":/path/to/test}
  # Or see example below:
  # "model.data.data_prefix: {train:[1.0,/path/to/data], validation:[/path/to/data], test:[/path/to/test]}"
  # IF we want to use an HF data module:
  # use_sft_style_data_module: True
  # train_dir: /shared/examples_datasets/wikicorpus_llama2_7B_tokenized_4k
  data_prefix: [1.0, /home/ubuntu/examples_datasets/llama/book.jsonl-processed_text_document]
  index_mapping_dir: null # path to save index mapping .npy files, by default will save in the same location as data_prefix
  data_impl: mmap
  splits_string: 980,10,10
  seq_length: ${model.encoder_seq_length}
  skip_warmup: False
  num_workers: 1
  dataloader_type: single # cyclic
  reset_position_ids: False # Reset position ids after end-of-document token
  reset_attention_mask: False # Reset attention mask after end-of-document token
  eod_mask_loss: False # Mask loss for the end of document tokens
  validation_drop_last: True # Set to false if the last partial validation samples is to be consumed
  no_seqlen_plus_one_input_tokens: False # Set to True to disable fetching (sequence length + 1) input tokens, instead get (sequence length) input tokens and mask the last token
  pad_samples_to_global_batch_size: False # Set to True if you want to pad the last partial batch with -1's to equal global batch size

  tokenizer:
    library: 'megatron'
    type: /home/ubuntu/llama_tokenizer
    model: null
    vocab_file: null
    merge_file: null
    delimiter: null # only used for tabular tokenizer
    sentencepiece_legacy: False # Legacy=True allows you to add special tokens to sentencepiece tokenizers.
    use_fast: False

model:
  # model architecture
  encoder_seq_length: 4096
  max_position_embeddings: ${.encoder_seq_length}
  num_layers: 32
  hidden_size: 4096
  ffn_hidden_size: 14336 # Transformer FFN hidden size. For Llama it's 8/3*hidden_size
  num_attention_heads: 32
  num_kv_heads: 32
  init_method_std: 0.021 # Standard deviation of the zero mean normal distribution used for weight initialization.')
  use_scaled_init_method: True # use scaled residuals initialization
  hidden_dropout: 0 # Dropout probability for hidden state transformer.
  attention_dropout: 0 # Dropout probability in the attention layer.
  ffn_dropout: 0 # Dropout probability in the feed-forward layer.
  kv_channels: null # Projection weights dimension in multi-head attention. Set to hidden_size // num_attention_heads if null
  apply_query_key_layer_scaling: True # scale Q * K^T by 1 / layer-number.
  normalization: 'rmsnorm' # Type of normalization layers ['rmsnorm', 'layernorm']
  layernorm_epsilon: 1e-5
  do_layer_norm_weight_decay: False # True means weight decay on all params
  make_vocab_size_divisible_by: 8 # Pad the vocab size to be divisible by this value for computation efficiency.
  persist_layer_norm: True # Use of persistent fused layer norm kernel.
  share_embeddings_and_output_weights: False # Untie embedding and output layer weights.
  position_embedding_type: 'rope' # Position embedding type. Options ['learned_absolute', 'rope]
  rotary_percentage: 1 # If using position_embedding_type=rope, then the per head dim is multiplied by this.
  activation: 'swiglu' # ['swiglu', 'gelu']
  transformer_block_type: 'pre_ln' # ['pre_ln', 'post_ln', 'normformer', 'gpt_j'] https://github.com/EleutherAI/gpt-neox/blob/303d7be582ae1c969347c25c54f568cc122445fc/megatron/model/transformer.py#L804-L847
  has_bias: False
  # Miscellaneous
  use_cpu_initialization: True # Init weights on the CPU (slow for large models)

  # MoE Configs
  moe:
    num_experts: 8 # of ExpertMLPs (explained in background)
    frequency: 1 # how frequent each layer is MoE i.e. 1 = every layer MoE 
    dropout: 0.0 # dropout for MoE Layer
    capacity_factor: 0.0
    # dropless flag: 
    #   True: Uses the blockwise NKI kernel inspired by Megablocks
    #   False: 
    #     - If capacity_factor is None: Uses all_experts()
    #     - Otherwise: Runs forward_capacity_factor()
    dropless: True
    routing_algorithm: top_k # or top_k - sinkhorn must have top_k=1
    router_activation: sigmoid # or softmax
    sinkhorn_iterations: 30 # number of sinkhorn based routing iterations at top-1 experts
    sinkhorn_tol: None # optional arg and only used if routing algorithm is set to sinkhorn
    top_k: 2 # number of top k routing
    output_router_logits: True
    router_aux_loss_coef: 0.02
    normalize_top_k_affinities: True

  # Activation Checkpointing
  activations_checkpoint_granularity: 'full' # 'selective' or 'full'
  activations_checkpoint_recompute: null

  fusions:
    softmax: True
    flash_attention: False # Use NKI flash attention

  optim:
    name: adamw
    lr: 3e-4
    weight_decay: 0.1
    capturable: True
    betas:
    - 0.9
    - 0.95
    sched:
      name: CosineAnnealing
      warmup_steps: 4000
      constant_steps: 0
      min_lr: 3.0e-5

precision:
  type: 'mixed_precision' # ['bf16SR', 'fp32', 'autocast', 'mixed_precision', 'mixed_precisionSR', 'manual']
  # Set the following only if precision type is manual, otherwise they will be automatically set.
  master_weights: True
  fp32_grad_acc: True
  fp32_grads_cc: False
  xla_use_bf16: '0'
  xla_downcast_bf16: '1'
  neuron_rt_stochastic_rounding_en: '0'

compiler_flags: '--model-type transformer --enable-saturate-infinity'
compiler_cache_url: neuron_cache
aync_exec_max_inflight_requests: 7
bucket_size_collectives: 1024
neuron_rt_exec_timeout: 100
neuron_experimental_compress_rg: False
