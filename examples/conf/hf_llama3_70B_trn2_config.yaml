name: hf_llama
model_source: hf
seed: 1234

trainer:
  devices: 64
  lnc: 2 # default for trn2 workloads
  num_nodes: 8
  max_epochs: -1 # PTL default. In practice, max_steps will be reached first.
  max_steps: 10000 # consumed_samples = global_step * micro_batch_size * data_parallel_size * accumulate_grad_batches
  log_every_n_steps: 10
  val_check_interval: 30001 # we do not want val to run during training, hence setting it at a high number
  check_val_every_n_epoch: null
  num_sanity_val_steps: 0
  limit_val_batches: 0.0
  limit_test_batches: 0.0
  gradient_clip_val: 1.0
  sequential_move_factor: 32 # reduces init time with tp-pp config; should be <= trainer.devices

exp_manager:
  log_local_rank_0_only: True # reduce file system access pressure
  create_tensorboard_logger: True
  explicit_log_dir: null
  exp_dir: null
  name: hf_llama
  resume_if_exists: True
  resume_ignore_no_checkpoint: True
  create_checkpoint_callback: True
  checkpoint_callback_params:
    monitor: step
    save_top_k: 1
    mode: max
    save_last: False
    filename: 'hf_llama3_70B--{step}-{consumed_samples}'
    model_parallel_size: ${multiply:${distributed_strategy.tensor_model_parallel_size}, ${distributed_strategy.pipeline_model_parallel_size}}
    every_n_train_steps: 1000
  log_parameter_norm: True # Logs parameter norm across model parallel ranks
  log_gradient_norm: True # Logs gradient norm across model parallel ranks
  enable_recovery_time_instrumentation: False # default to not printing the detailing timing for recovery
  save_xser: True
  load_xser: True
  save_bf16: False
  async_checkpointing: False # default to not use async checkpointing
  resume_from_checkpoint: null # manually set the checkpoint file to load from 

distributed_strategy:
  tensor_model_parallel_size: 32
  pipeline_model_parallel_size: 4
  virtual_pipeline_model_parallel_size: 1
  zero1: True
  sequence_parallel: True
  kv_replicator: 4

data:
  micro_batch_size: 1 # limited by GPU memory
  global_batch_size: 4 # [DPO] batch size will be twice the global batch size here, since we concatenate and forward chosen and rejected responses per prompt together
  train_dir: /home/ubuntu/data_dpo.jsonl # [SFT/DPO] '/ubuntu/training.jsonl' or arrow file. As for ModelAlignment we use HF style dataloader, we also use HF style data file paths
  val_dir: null # [SFT/DPO] '/ubuntu/training.jsonl' or arrow file
  alignment_strategy:
    dpo:
      kl_beta: 0.01 # [DPO] kl-divergence beta to control divergence from reference model
      loss_type: sigmoid # [DPO] support sigmoid versions of optimized dpo loss; options
      max_dpo_prompt_length: 2048 # [DPO] maximum length of prompt in input
      precompute_ref_log_probs: True # set to True, precompute reference model probs using pre-fit hook, False is not supported
      truncation_mode: keep_start # how to truncate if size(prompt+response) exceeds seq_length; options: ["keep_start", "keep_end"]
  dev_choose_samples: null # [SFT/DPO] if set, will use those many number of records from the head of the dataset instead of using all. Set to null to use full dataset
  seq_length: 4096
  tokenizer:
    type: /home/ubuntu/llama3_tokenizer # [SFT change 6 required]

model:
  # specify micro_batch_size, global_batch_size, and model parallelism
  # gradient accumulation will be done automatically based on data_parallel_size

  # model architecture
  model_config: /home/ubuntu/config.json # TODO: Expand this into arguments in this file
  encoder_seq_length: 8192
  max_position_embeddings: 8192
  num_layers: 80
  hidden_size: 8192
  qkv_linear: True
  fuse_qkv: True
  rope_theta: 500000.0
  pipeline_cuts: ["model.layers.18", "model.layers.39", "model.layers.60"] # for pipeline balancing
  
  # Miscellaneous
  use_cpu_initialization: True # Init weights on the CPU (slow for large models) 

  ## Activation Checkpointing
  activations_checkpoint_granularity: full # 'selective' or 'full'

  fusions:
    flash_attention: True
  
  do_layer_norm_weight_decay: True

  optim:
    name: adamw_fp32OptState
    lr: 5.0e-7
    weight_decay: 0.01
    capturable: False
    betas:
    - 0.9
    - 0.95
    sched:
      name: CosineAnnealing
      warmup_steps: 2000
      max_steps: ${trainer.max_steps}
      min_lr: 1e-06
      constant_steps: 0

precision:
  type: 'mixed_precision' # ['bf16SR', 'fp32', 'autocast', 'mixed_precision', 'mixed_precisionSR', 'manual'] 
  # Set the following only if precision type is manual, otherwise they will be automatically set.
  master_weights: False  
  fp32_grad_acc: False
  xla_use_bf16: '0'
  xla_downcast_bf16: '0'
  neuron_rt_stochastic_rounding_en: '0'

# fix: hardcoded trn2 compiler flags to this config, will remove after compiler updates
compiler_flags: '--model-type transformer --distribution-strategy=llm-training'
compiler_cache_url: /home/ubuntu/neuron-cache
aync_exec_max_inflight_requests: 5
bucket_size_collectives: 1024
neuron_rt_exec_timeout: 100
neuron_experimental_compress_rg: False