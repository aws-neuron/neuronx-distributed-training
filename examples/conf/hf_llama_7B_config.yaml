name: hf_llama
model_source: hf
seed: 1234

trainer:
  devices: 32
  num_nodes: 1
  max_epochs: -1 # PTL default. In practice, max_steps will be reached first.
  max_steps: 10000 # consumed_samples = global_step * micro_batch_size * data_parallel_size * accumulate_grad_batches
  log_every_n_steps: 1
  val_check_interval: 10001 # we do not want val to run during training, hence setting it at a high number
  check_val_every_n_epoch: null
  num_sanity_val_steps: 0
  limit_val_batches: 0.0
  limit_test_batches: 0.0
  gradient_clip_val: 1.0

exp_manager:
  log_local_rank_0_only: True # reduce file system access pressure
  create_tensorboard_logger: True
  explicit_log_dir: null
  exp_dir: null
  name: hf_llama
  resume_if_exists: True
  resume_ignore_no_checkpoint: True
  create_checkpoint_callback: True
  checkpoint_callback_params:
    monitor: step
    save_top_k: 1
    mode: max
    save_last: False
    filename: 'hf_llama--{step}-{consumed_samples}'
    model_parallel_size: ${multiply:${distributed_strategy.tensor_model_parallel_size}, ${distributed_strategy.pipeline_model_parallel_size}}
    every_n_train_steps: 10
    use_master_weights_in_ckpt: False
  log_parameter_norm: True # Logs parameter norm across model parallel ranks
  log_gradient_norm: True # Logs gradient norm across model parallel ranks
  enable_recovery_time_instrumentation: False # default to not printing the detailing timing for recovery
  save_xser: True
  load_xser: True
  save_bf16: False
  async_checkpointing: False # default to not use async checkpointing
  resume_from_checkpoint: null # manually set the checkpoint file to load from 

distributed_strategy:
  tensor_model_parallel_size: 8
  pipeline_model_parallel_size: 1
  virtual_pipeline_model_parallel_size: 1
  zero1: True
  sequence_parallel: True
  kv_replicator: 1

data:
  micro_batch_size: 1 # limited by TRN memory
  global_batch_size: 1024
  train_dir: /home/ubuntu/examples_datasets/wikicorpus_llama2_7B_tokenized_4k

model:
  # specify micro_batch_size, global_batch_size, and model parallelism
  # gradient accumulation will be done automatically based on data_parallel_size

  # model architecture
  model_config: /home/ubuntu/config.json # TODO: Expand this into arguments in this file
  encoder_seq_length: 4096
  max_position_embeddings: ${.encoder_seq_length}
  num_layers: 4
  hidden_size: 4096
  qkv_linear: False
  
  # Miscellaneous
  use_cpu_initialization: True # Init weights on the CPU (slow for large models) 

  ## Activation Checkpointing
  activations_checkpoint_granularity: selective # 'selective' or 'full'

  fusions:
    softmax: True
    flash_attention: False
  
  do_layer_norm_weight_decay: True

  optim:
    name: adamw_fp32OptState
    lr: 3e-4
    weight_decay: 0.01
    capturable: False
    betas:
    - 0.9
    - 0.999
    sched:
      name: LinearAnnealingWithWarmUp
      warmup_steps: 100
      max_steps: ${trainer.max_steps}

precision:
  type: 'mixed_precision' # ['bf16SR', 'fp32', 'autocast', 'mixed_precision', 'mixed_precisionSR', 'manual']
  # Set the following only if precision type is manual, otherwise they will be automatically set.
  master_weights: False    
  fp32_grad_acc: False
  xla_use_bf16: '0'
  xla_downcast_bf16: '0'
  neuron_rt_stochastic_rounding_en: '0'

compiler_flags: '--model-type transformer --distribution-strategy=llm-training'
compiler_cache_url: /home/ubuntu/neuron_cache
aync_exec_max_inflight_requests: 5
bucket_size_collectives: 1024
neuron_rt_exec_timeout: 100
neuron_experimental_compress_rg: False